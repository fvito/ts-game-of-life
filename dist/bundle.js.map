{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app.ts","webpack:///./src/blueprint.ts","webpack:///./src/cell.ts","webpack:///./src/chrono.ts","webpack:///./src/game.ts","webpack:///./src/game_state.ts","webpack:///./src/parsers/rle_parser.ts","webpack:///./src/settings.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;;;;ACnEA,gGAAoC;AAEpC,iFAA0B;AAC1B,mHAA6C;AAC7C,6FAAkC;AAmClC;IAOI,aAAY,QAAgB;QACxB,IAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAsB,CAAC;QAErE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAE5B,IAAI,CAAC,cAAc,EAAE,CAAC;QAEtB,IAAI,CAAC,IAAI,GAAG,IAAI,cAAI,CAAC,IAAI,kBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;QAC5D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QAEtB,IAAI,CAAC,4BAA4B,EAAE,CAAC;IACxC,CAAC;IAED;;OAEG;IACK,4BAAc,GAAtB;QAAA,iBA4FC;QA3FG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,OAAO,EAAE;YACrC,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,OAAO,EAAE;YACtC,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,OAAO,EAAE;YACvC,KAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,OAAO,EAAE;YACxC,KAAI,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,OAAO,EAAE;YAC1C,KAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;YACnC,KAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE,UAAC,OAAO;gBAClD,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,gDAAgD,CAAgB,CAAC;gBACtG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;oBACvC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;iBACpC;gBACD,IAAM,KAAK,GAAG,OAA+B,CAAC;gBAC9C,KAAK,CAAC,SAAS,GAAG,0BAA0B,CAAC;YACjD,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,OAAO,EAAE;YACzC,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,OAAO,EAAE;YAChC,KAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,EAAE;YACjC,KAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,OAAO,EAAE;YACjC,KAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,EAAE;YAC/B,KAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;YAChB,KAAI,CAAC,aAAa,CAAC,SAAS,EAAE,UAAC,OAAoB;gBAC/C,IAAI,KAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;oBACvB,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;iBACrE;qBAAM;oBACH,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;iBACrE;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE;YAChC,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAqB,CAAC;YACvE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE;YAChC,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAqB,CAAC;YACvE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,EAAE;YAChC,IAAM,QAAQ,GAAG,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAqB,CAAC;YACvE,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,EAAE,UAAC,KAAK;YACxC,IAAM,GAAG,GAAG,KAAK,CAAC,MAA0B,CAAC;YAC7C,KAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,UAAC,OAAoB;gBACvD,OAAO,CAAC,SAAS,GAAG,UAAQ,GAAG,CAAC,KAAO,CAAC;YAC5C,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,SAAS,CAAC,mBAAmB,EAAE,OAAO,EAAE,UAAC,KAAK;YAC/C,IAAM,GAAG,GAAG,KAAK,CAAC,MAA0B,CAAC;YAC7C,IAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAChC,KAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE,UAAC,OAAoB;gBAC9D,OAAO,CAAC,SAAS,GAAG,iBAAe,KAAO,CAAC;YAC/C,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;YACtC,KAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACvB,KAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAmB,CAAC;QACzE,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;YACrC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAgB,CAAC;gBACnD,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;aACpE;SACJ;QAED,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,OAAO,EAAE;YACxC,KAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IAEP,CAAC;IAED;;OAEG;IACK,0CAA4B,GAApC;QACI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,kIAAkI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QAC5K,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,6JACyD,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC3G,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QACpD,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,oFAAoF,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACjI,IAAI,CAAC,eAAe,CAAC,mBAAmB,EAAE,qGAAqG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACxJ,IAAI,CAAC,eAAe,CAAC,kBAAkB,EAAE,8GAA8G,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACjK,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,2GAA2G,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACpJ,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,obAKX,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;IAEO,2BAAa,GAArB;QACI,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,2BAAa,GAArB;QACI,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,cAAc,CAAwB,CAAC;QAC9E,IAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC3C,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,KAAiB,UAAQ,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ;YAApB,IAAI,IAAI;YACT,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACpC,0EAA0E;gBAC1E,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;aACzB;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACxB,uFAAuF;gBACvF,SAAS;aACZ;iBAAM,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBACxB;mFACmE;gBACnE,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC/B,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC/B,KAAoB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;oBAArB,IAAM,KAAK;oBACZ,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBAClB,oGAAoG;wBACpG,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;qBACvC;yBAAM,IAAI,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;wBACzB,oGAAoG;wBACpG,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;wBACjC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;qBACvC;iBACJ;aACJ;iBAAM;gBACH,uGAAuG;gBACvG,GAAG,IAAI,IAAI,CAAC;aACf;SACJ;QACD,oDAAoD;QACpD,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;OAMG;IACK,6BAAe,GAAvB,UAAwB,IAAY,EAAE,OAAe,EAAE,CAAS,EAAE,CAAS;QACvE,IAAM,GAAG,GAAG,oBAAS,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,oBAAoB,CAAC,IAAI,mBAAS,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;OAKG;IACK,uBAAS,GAAjB,UAAkB,QAAgB,EAAE,KAAa,EAAE,MAA2B;QAC1E,IAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAgB,CAAC;QACrE,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC3C,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC3C;IACL,CAAC;IAED;;;;OAIG;IACK,2BAAa,GAArB,UAAsB,QAAgB,EAAE,MAA6B;QACjE,IAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAgB,CAAC;QACrE,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC3C,MAAM,CAAC,OAAO,CAAC,CAAC;SACnB;IACL,CAAC;IAED;;;OAGG;IACK,2BAAa,GAArB,UAAsB,QAAgB;QAClC,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QACjD,IAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC3C,IAAI,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACtC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aAChD;iBAAM;gBACH,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;aAChD;SACJ;IACL,CAAC;IAED;;;OAGG;IACK,wBAAU,GAAlB,UAAmB,UAAkB;QACjC,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,aAA+B,CAAC;QAE3D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;QACpF,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC;QAEtF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACK,iCAAmB,GAA3B,UAA4B,KAAkB;QAC1C,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,gDAAgD,CAAgB,CAAC;QACtG,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;YACvC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACpC;QACD,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9B,8BAA8B;QAC9B,IAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,IAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,yBAAyB,EAAE,UAAC,OAAO;YAClD,IAAM,KAAK,GAAG,OAA+B,CAAC;YAC9C,KAAK,CAAC,SAAS,GAAG,yBAAuB,SAAS,CAAC,IAAM,CAAC;QAC9D,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACK,kCAAoB,GAA5B,UAA6B,SAAoB;QAAjD,iBAWC;QAVG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAChC,IAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,CAAC,CAAC;QAChE,8BAA8B;QAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE;YAC3B,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IACL,UAAC;AAAD,CAAC;AAED,oEAAoE;AACpE,CAAC,CAAC;IACE,uDAAuD;IACvD,iBAAiB;IACjB,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;AC7UH;IAkBI;;;;;;OAMG;IACH,mBAAY,CAAS,EAAE,CAAS,EAAE,KAAgB,EAAE,IAAgB;QAAhB,uCAAgB;QAChE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IACL,gBAAC;AAAD,CAAC;AA/BY,8BAAS;AAgCtB,kBAAe,SAAS,CAAC;;;;;;;;;;;;;;;AClCzB;;GAEG;AACH,IAAY,KAGX;AAHD,WAAY,KAAK;IACb,iCAAQ;IACR,mCAAS;AACb,CAAC,EAHW,KAAK,GAAL,aAAK,KAAL,aAAK,QAGhB;AAED;IA+BI;;;;;;OAMG;IACH,cAAY,CAAS,EAAE,CAAS,EAAE,UAAkB,EAAE,KAAa;QArBnE;;WAEG;QACI,UAAK,GAAU,KAAK,CAAC,IAAI,CAAC;QACjC;;WAEG;QACI,cAAS,GAAU,KAAK,CAAC,IAAI,CAAC;QACrC;;;WAGG;QACI,UAAK,GAAG,OAAO,CAAC;QAUnB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;QACxB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC;QACzB,IAAI,KAAK,EAAE;YACP,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SAC1B;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC;SAC/B;IACL,CAAC;IAED;;OAEG;IACI,wBAAS,GAAhB;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;IAChC,CAAC;IAED;;;OAGG;IACI,uBAAQ,GAAf,UAAgB,KAAY;QACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACI,sBAAO,GAAd,UAAe,KAAa,EAAE,MAAc;QACxC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IACL,WAAC;AAAD,CAAC;AA7EY,oBAAI;AA+EjB,kBAAe,IAAI,CAAC;;;;;;;;;;;;;;;ACvFpB;IAWI;;;OAGG;IACH,gBAAY,SAA4B;QAA5B,4CAAsB,IAAI,EAAE;QAdxC;;;WAGG;QACK,cAAS,GAAG,KAAK,CAAC;QAWtB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,4BAAW,GAAlB;QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;SAC9B;IACL,CAAC;IAED;;;OAGG;IACI,2BAAU,GAAjB;QACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,eAAe,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC;IACjF,CAAC;IACL,aAAC;AAAD,CAAC;AArCY,wBAAM;AAsCnB,kBAAe,MAAM,CAAC;;;;;;;;;;;;;;;;;;ACpCtB,gEAAmC;AACnC,uFAA8B;AAC9B,mGAAqC;AAErC;IAoCI;;;OAGG;IACH,cAAY,QAAkB;QAA9B,iBAMC;QAvCM,UAAK,GAAc,IAAI,oBAAS,EAAE,CAAC;QAEnC,WAAM,GAAW,IAAI,gBAAM,EAAE,CAAC;QASrC;;WAEG;QACI,UAAK,GAAG,CAAC,CAAC;QAEjB;;;WAGG;QACI,eAAU,GAAG,CAAC,CAAC;QAOL,WAAM,GAAa,CAAC,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,cAAc,EAAE,QAAQ,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAmD9H;;;WAGG;QACI,SAAI,GAAG;YACV,8BAA8B;YAC9B,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC;YACf,KAAI,CAAC,UAAU,EAAE,CAAC;YAElB,KAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;oBAChC,IAAM,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC9B,gEAAgE;oBAChE,IAAM,GAAG,GAAG,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;oBACrC,IAAI,CAAC,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC9B,IAAI,GAAG,KAAK,CAAC,EAAE;wBACX,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAC/B;yBAAM,IAAI,GAAG,KAAK,CAAC,EAAE;wBAClB,KAAI,CAAC,KAAK,EAAE,CAAC;wBACb,IAAI,CAAC,SAAS,GAAG,YAAK,CAAC,KAAK,CAAC;qBAChC;yBAAM;wBACH,IAAI,CAAC,SAAS,GAAG,YAAK,CAAC,IAAI,CAAC;qBAC/B;iBACJ;aACJ;YAED,KAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAE/C,qBAAqB;YACrB,KAAI,CAAC,MAAM,EAAE,CAAC;YAEd,IAAI,KAAI,CAAC,KAAK,KAAK,CAAC,EAAE;gBAClB,oEAAoE;gBACpE,KAAI,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;gBAC3B,OAAO;aACV;YACD,8EAA8E;YAC9E,IAAI,KAAI,CAAC,KAAK,CAAC,OAAO,EAAE;gBACpB,UAAU,CAAC;oBACP,qBAAqB,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;gBACrC,CAAC,EAAE,IAAI,GAAG,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aAChC;QACL,CAAC,CAAC;QAsNF;;;;;;;WAOG;QACc,UAAK,GAAG,UAAC,KAAiB;YACvC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YAEhB,CAAC,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;YACrC,CAAC,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;YAEpC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAE7C,4DAA4D;YAC5D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpB,IAAI,KAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;oBACjC,KAAI,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;iBACzD;qBAAM;oBACH,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAK,CAAC,KAAK,CAAC,CAAC;iBAC1C;aACJ;iBAAM,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC3B,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAK,CAAC,IAAI,CAAC,CAAC;aACzC;YACD,KAAI,CAAC,iBAAiB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC,CAAC;QAEF;;;;WAIG;QACc,UAAK,GAAG,UAAC,KAAiB;YACvC,KAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;YAEhB,CAAC,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC;YACrC,CAAC,IAAI,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC;YAEpC,2CAA2C;YAC3C,IAAI,KAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;gBAC1B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;gBAC7C,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,KAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aAChD;YAED,4CAA4C;YAC5C,IAAI,KAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE;gBACjC,KAAI,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,KAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;aAC7D;iBAAM;gBACH,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1B;QACL,CAAC,CAAC;QAtWE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,gDAAgD;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC5D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC/D,CAAC;IAED;;OAEG;IACI,+BAAgB,GAAvB;QACI,8EAA8E;QAC9E,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACtE,+DAA+D;QAC/D,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1E,CAAC;IAED;;OAEG;IACI,wBAAS,GAAhB;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpB,CAAC;IAED;;OAEG;IACI,0BAAW,GAAlB;QACI,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;IAED;;OAEG;IACI,yBAAU,GAAjB;QACI,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACxB,CAAC;IAgDD;;;OAGG;IACI,wBAAS,GAAhB;QACI,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED;;OAEG;IACI,kBAAG,GAAV;QACI,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QACzC,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,qBAAM,GAAb,UAAc,UAAkB;QAC5B,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,UAAU,CAAC;QAClD,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,UAAU,CAAC;QAEjD,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,IAAI,IAAI,CAAC,IAAI,GAAG,OAAO,EAAE;YAC5C,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;SAC7C;aAAM;YACH,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;SAC7C;QACD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACrB,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB;IACL,CAAC;IAED;;;;;OAKG;IACI,2BAAY,GAAnB,UAAoB,CAAS,EAAE,CAAS,EAAE,SAAoB;QAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5D;SACJ;QACD,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACI,+BAAgB,GAAvB,UAAwB,CAAS,EAAE,CAAS,EAAE,SAAoB;QAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,YAAK,CAAC,KAAK,EAAE;oBACvC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAI,CAAC,CAAC,CAAC;iBACnC;aACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACI,8BAAe,GAAtB,UAAuB,SAAoB;QACvC,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAG,SAAS,CAAC;QACzC,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,qCAAsB,GAA7B;QACI,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,KAAK,CAAC;IAC5C,CAAC;IAED;;OAEG;IACK,yBAAU,GAAlB;QACI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,EAAE;oBACtB,IAAI,CAAC,QAAQ,CAAC,YAAK,CAAC,KAAK,CAAC,CAAC;iBAC9B;aACJ;SACJ;IACL,CAAC;IAED;;OAEG;IACK,wBAAS,GAAjB;QACI,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,WAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aAC/D;SACJ;IACL,CAAC;IAED;;OAEG;IACK,uBAAQ,GAAhB;QACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,GAAG,kBAAkB,CAAC;QACvD,sDAAsD;QACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YACvF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SAClC;QACD,yDAAyD;QACzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACxF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;SAClC;IACL,CAAC;IAED,qDAAqD;IAC7C,uBAAQ,GAAhB,UAAiB,IAAU;QACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7C,IAAI,IAAI,CAAC,KAAK,KAAK,YAAK,CAAC,KAAK,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACjJ;IACL,CAAC;IAED;;;OAGG;IACK,gCAAiB,GAAzB,UAA0B,IAAU;QAChC,IAAI,IAAI,CAAC,KAAK,KAAK,YAAK,CAAC,KAAK,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACjJ;aAAM;YACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAClJ;IACL,CAAC;IAED;;OAEG;IACK,qBAAM,GAAd;QAEI,4BAA4B;QAC5B,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,mDAAmD;QACnD,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,QAAQ,EAAE,CAAC;SACnB;QACD,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAE/C,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QAC1B,kDAAkD;QAClD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAChC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9B,oDAAoD;gBACpD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ;QAED,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAE/C,yCAAyC;QACzC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACxB,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;IAEL,CAAC;IAED;;;;;;;;;;OAUG;IACK,4BAAa,GAArB;QACI,IAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,GAAG,CAAC;QACvC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,iBAAiB,CAAC;QACpD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAClD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAe,IAAI,CAAC,UAAY,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAC1F,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAU,IAAI,CAAC,KAAO,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAc,IAAI,CAAC,KAAK,CAAC,QAAQ,QAAK,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAChG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,+BAA6B,IAAI,CAAC,KAAK,CAAC,QAAQ,QAAK,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAC/G,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,qBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,QAAK,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QACrG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,kBAAe,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,SAAK,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QAC7I,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAQ,IAAI,CAAC,QAAQ,CAAC,GAAK,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAe,IAAI,CAAC,QAAQ,CAAC,UAAY,EAAE,IAAI,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;IACxG,CAAC;IA4DD,iGAAiG;IACzF,0BAAW,GAAnB,UAAoB,CAAS,EAAE,CAAS;QACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,GAAG,mBAAmB,CAAC;QACtD,IAAM,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC1C,IAAM,IAAI,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACnH,CAAC;IAED;;OAEG;IACK,2BAAY,GAApB;QACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnG,CAAC;IAED;;;OAGG;IACK,4BAAa,GAArB,UAAsB,IAAU;QAC5B,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjB,IAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC1B,iFAAiF;gBACjF,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE;oBAC5E,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;iBACzC;aACJ;SACJ;QACD,OAAO,GAAG,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACK,qBAAM,GAAd,UAAe,UAAkB,EAAE,OAAe,EAAE,OAAe;QAC/D,gBAAgB;QAChB,IAAI,QAAkB,CAAC;QACvB,QAAQ,GAAG,EAAE,CAAC;QACd,6FAA6F;QAC7F,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;YAC9B,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBAC9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,4BAA4B;gBAC5B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;aAClD;SACJ;QACD,+CAA+C;QAC/C,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAED;;;;;OAKG;IACK,qBAAM,GAAd,UAAe,UAAkB,EAAE,OAAe,EAAE,OAAe;QAC/D,gBAAgB;QAChB,IAAI,QAAkB,CAAC;QACvB,QAAQ,GAAG,EAAE,CAAC;QACd,+CAA+C;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;YAC9B,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBAC9B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,WAAI,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;aAC/C;SACJ;QACD,4CAA4C;QAC5C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;YAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE;gBAChC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,mDAAmD;gBACnD,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;aAClD;SACJ;QACD,+CAA+C;QAC/C,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;IAC1B,CAAC;IACL,WAAC;AAAD,CAAC;AAteY,oBAAI;AAwejB,kBAAe,IAAI,CAAC;;;;;;;;;;;;;;;AC5epB;IAAA;QACI;;WAEG;QACI,YAAO,GAAG,KAAK,CAAC;QACvB;;;WAGG;QACI,aAAQ,GAAG,CAAC,CAAC;QACpB;;;WAGG;QACI,aAAQ,GAAG,CAAC,CAAC;QACpB;;;WAGG;QACI,aAAQ,GAAG,CAAC,CAAC;QAKpB;;;WAGG;QACI,yBAAoB,GAAG,KAAK,CAAC;IACxC,CAAC;IAAD,gBAAC;AAAD,CAAC;AA7BY,8BAAS;AA8BtB,kBAAe,SAAS;;;;;;;;;;;;;;;AC7BxB;IAKI;QAFiB,YAAO,GAAG,IAAI,MAAM,CAAC,wBAAwB,EAAE,GAAG,CAAC,CAAC;IAIrE,CAAC;IAAA,CAAC;IAEK,yBAAK,GAAZ,UAAa,IAAY,EAAE,CAAS,EAAE,CAAS;QAC3C,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,MAAM,KAAK,IAAI,IAAI,MAAM,KAAK,SAAS,EAAE;YACzC,OAAO,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YAClC,OAAO,IAAI,CAAC;SACf;QACD,IAAM,MAAM,GAAc,EAAE,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YACxB,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBACxB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;aACpB;SACJ;QACD,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,IAAI,GAAG,GAAG,CAAC,CAAC;QACZ,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,KAAoB,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM;YAArB,IAAM,KAAK;YACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;gBACvB,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;aACjC;iBAAM,IAAI,KAAK,KAAK,GAAG,EAAE;gBACtB,eAAe;gBACf,iDAAiD;gBACjD,MAAM,IAAI,aAAa,CAAC;gBACxB,aAAa,GAAG,CAAC,CAAC;aACrB;iBAAM,IAAI,KAAK,KAAK,GAAG,EAAE;gBACtB,gBAAgB;gBAChB,iDAAiD;gBACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;oBACpC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;iBAC/B;gBACD,MAAM,IAAI,aAAa,CAAC;gBACxB,aAAa,GAAG,CAAC,CAAC;aACrB;iBAAM,IAAI,KAAK,KAAK,GAAG,EAAE;gBACtB,iBAAiB;gBACjB,8BAA8B;gBAC9B,MAAM,GAAG,CAAC,CAAC;gBACX,GAAG,IAAI,aAAa,CAAC;gBACrB,aAAa,GAAG,CAAC,CAAC;aACrB;iBAAM,IAAI,KAAK,KAAK,GAAG,EAAE;gBACtB,oBAAoB;gBACpB,mCAAmC;aACtC;SACJ;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,sBAAkB,qBAAQ;aAA1B;YACI,OAAO,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC;QACzD,CAAC;;;OAAA;IACL,gBAAC;AAAD,CAAC;AAED,IAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;AACpC,kBAAe,QAAQ,CAAC;;;;;;;;;;;;;;;AChExB;;GAEG;AACH;IAgDI;;;;OAIG;IACH,kBAAY,MAAyB,EAAE,UAAkB;QA1CzD;;WAEG;QACI,eAAU,GAAG,IAAI,CAAC;QAEzB;;WAEG;QACI,aAAQ,GAAG,IAAI,CAAC;QAEvB;;;WAGG;QACI,aAAQ,GAAG,KAAK,CAAC;QAExB;;;WAGG;QACI,QAAG,GAAG,EAAE,CAAC;QAuBZ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAA6B,CAAC;QACnE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;IAMD,sBAAI,2BAAK;QAJT;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAMD,sBAAI,4BAAM;QAJV;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAMD,sBAAI,gCAAU;QAJd;;;WAGG;aACH;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;QAED;;;WAGG;aACH,UAAe,KAAa;YACxB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QAC7B,CAAC;;;OARA;IASL,eAAC;AAAD,CAAC;AA5FY,4BAAQ;AA8FrB,kBAAe,QAAQ,CAAC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/app.ts\");\n","import Blueprint from \"./blueprint\";\r\nimport Cell, {State} from \"./cell\";\r\nimport Game from \"./game\";\r\nimport RLEParser from \"./parsers/rle_parser\";\r\nimport Settings from \"./settings\";\r\n\r\ninterface JQuery {\r\n    fadeIn(): JQuery;\r\n\r\n    fadeOut(): JQuery;\r\n\r\n    focus(): JQuery;\r\n\r\n    html(): string;\r\n\r\n    html(val: string): JQuery;\r\n\r\n    show(): JQuery;\r\n\r\n    addClass(className: string): JQuery;\r\n\r\n    removeClass(className: string): JQuery;\r\n\r\n    append(el: HTMLElement): JQuery;\r\n\r\n    val(): string;\r\n\r\n    val(value: string): JQuery;\r\n\r\n    attr(attrName: string): string;\r\n\r\n    change(param: () => any): void;\r\n}\r\n\r\ndeclare var $: {\r\n    (el: HTMLElement | string): JQuery;\r\n    (readyCallback: () => void): JQuery;\r\n};\r\n\r\nclass App {\r\n\r\n    private readonly game: Game;\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly blueprints: Blueprint[];\r\n    private blueprintsList!: HTMLElement;\r\n\r\n    constructor(canvasId: string) {\r\n        const resolution = 10;\r\n        this.blueprints = [];\r\n        this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n\r\n        this.sizeCanvas(resolution);\r\n\r\n        this.setupCallbacks();\r\n\r\n        this.game = new Game(new Settings(this.canvas, resolution));\r\n        this.game.initBoard();\r\n\r\n        this.populateInitialBlueprintList();\r\n    }\r\n\r\n    /**\r\n     * Sets up all the callbacks for the ui elements\r\n     */\r\n    private setupCallbacks() {\r\n        this.bindEvent(\"#showSettings\", \"click\", () => {\r\n            this.toggleSidebar(\"#settings\");\r\n        });\r\n        this.bindEvent(\"#closeSettings\", \"click\", () => {\r\n            this.toggleSidebar(\"#settings\");\r\n        });\r\n\r\n        this.bindEvent(\"#showBlueprints\", \"click\", () => {\r\n            this.toggleSidebar(\"#blueprints\");\r\n        });\r\n\r\n        this.bindEvent(\"#closeBlueprints\", \"click\", () => {\r\n            this.toggleSidebar(\"#blueprints\");\r\n        });\r\n\r\n        this.bindEvent(\"#clearBlueprintBtn\", \"click\", () => {\r\n            this.game.clearSelectedBlueprint();\r\n            this.updateElement(\"#selectedBlueprintLabel\", (element) => {\r\n                const other = document.querySelector(\".list-group-item.list-group-item-action.active\") as HTMLElement;\r\n                if (other !== null && other !== undefined) {\r\n                    other.classList.remove(\"active\");\r\n                }\r\n                const label = element as HTMLParagraphElement;\r\n                label.innerText = `Selected blueprint: None`;\r\n            });\r\n        });\r\n        this.bindEvent(\"#applySettingsBtn\", \"click\", () => {\r\n            this.applySettings();\r\n        });\r\n        this.bindEvent(\"#stepBtn\", \"click\", () => {\r\n            this.game.step();\r\n        });\r\n        this.bindEvent(\"#resetBtn\", \"click\", () => {\r\n            this.game.randomBoard();\r\n        });\r\n        this.bindEvent(\"#clearBtn\", \"click\", () => {\r\n            this.game.clearBoard();\r\n        });\r\n        this.bindEvent(\"#runBtn\", \"click\", () => {\r\n            this.game.run();\r\n            this.updateElement(\"#runBtn\", (element: HTMLElement) => {\r\n                if (this.game.isRunning()) {\r\n                    element.children.item(0).classList.replace(\"fa-play\", \"fa-pause\");\r\n                } else {\r\n                    element.children.item(0).classList.replace(\"fa-pause\", \"fa-play\");\r\n                }\r\n            });\r\n        });\r\n        this.bindEvent(\"#gridCb\", \"change\", () => {\r\n            const checkbox = document.getElementById(\"gridCb\") as HTMLInputElement;\r\n            this.game.settings.showGrid = checkbox.checked;\r\n        });\r\n        this.bindEvent(\"#snapCb\", \"change\", () => {\r\n            const checkbox = document.getElementById(\"snapCb\") as HTMLInputElement;\r\n            this.game.settings.snapToGrid = checkbox.checked;\r\n        });\r\n        this.bindEvent(\"#infoCb\", \"change\", () => {\r\n            const checkbox = document.getElementById(\"infoCb\") as HTMLInputElement;\r\n            this.game.settings.showInfo = checkbox.checked;\r\n        });\r\n        this.bindEvent(\"#fpsSlider\", \"input\", (event) => {\r\n            const ele = event.target as HTMLInputElement;\r\n            this.updateElement(\"#fpsSliderLabel\", (element: HTMLElement) => {\r\n                element.innerText = `FPS: ${ele.value}`;\r\n            });\r\n            this.game.settings.fps = Number(ele.value);\r\n        });\r\n        this.bindEvent(\"#resolutionSlider\", \"input\", (event) => {\r\n            const ele = event.target as HTMLInputElement;\r\n            const value = Number(ele.value);\r\n            this.updateElement(\"#resolutionSliderLabel\", (element: HTMLElement) => {\r\n                element.innerText = `Resolution: ${value}`;\r\n            });\r\n            this.game.settings.resolution = value;\r\n            this.sizeCanvas(value);\r\n            this.game.resize(value);\r\n        });\r\n\r\n        const list = document.querySelector(\"#blueprintsList\") as HTMLDivElement;\r\n        if (list !== null && list !== undefined) {\r\n            this.blueprintsList = list;\r\n            for (let i = 0; i < list.children.length; i++) {\r\n                const child = list.children.item(i) as HTMLElement;\r\n                child.addEventListener(\"click\", this.blueprintsListClick(child));\r\n            }\r\n        }\r\n\r\n        this.bindEvent(\"#addNewBlueprint\", \"click\", () => {\r\n            this.loadBlueprint();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Populates the blueprints list with predefined blueprints\r\n     */\r\n    private populateInitialBlueprintList(): void {\r\n        this.addNewBlueprint(\"Glasses\", `4bo8bo4b$2b3o8b3o2b$bo14bob$bo2b3o4b3o2bob$2obo3bo2bo3bob2o$3bo3b4o3bo3b$3bo3bo2bo3bo3b$4b3o4b3o4b2$4b2obo2bob2o4b$4bob2o2b2obo!`, 18, 11);\r\n        this.addNewBlueprint(\"Carnival shuttle\", `33bo3bo$2o3b2o26b5o$bobobo3bo2bo6b2o3bo2bo7bo2b$\r\n                        b2ob2o2b2o3b2o4b2o2b2o3b2o4bobob$bobobo3bo2bo6b2o3bo2bo7bo2b$2o3b2o26b5o$33bo3bo!`, 38, 7);\r\n        this.addNewBlueprint(\"Glider\", `bob$2bo$3o!`, 3, 3);\r\n        this.addNewBlueprint(\"T-nosed P4\", `4b3o4b$5bo5b2$4b3o4b$3bo3bo3b$2bo5bo2b$2bobobobo2b$b2obobob2ob$o2b2ob2o2bo$2o7b2o!`, 11, 10);\r\n        this.addNewBlueprint(\"Gosper glider gun\", `24bo$22bobo$12b2o6b2o12b2o$11bo3bo4b2o12b2o$2o8bo5bo3b2o$2o8bo3bob2o4bobo$10bo5bo7bo$11bo3bo$12b2o!`, 36, 9);\r\n        this.addNewBlueprint(\"Garden of Eden 5\", `b3o2b2o3b$b2obobob3o$b3o2b5o$obobobobobo$4obobobob$4b3o4b$bobobob4o$obobobobobo$5o2b3ob$3obobob2ob$3b2o2b3o!`, 11, 11);\r\n        this.addNewBlueprint(\"Pulsar\", `2b3o3b3o2b2$o4bobo4bo$o4bobo4bo$o4bobo4bo$2b3o3b3o2b2$2b3o3b3o2b$o4bobo4bo$o4bobo4bo$o4bobo4bo2$2b3o3b3o!`, 13, 13);\r\n        this.addNewBlueprint(\"Quasar\", `10b3o3b3o10b2$8bo4bobo4bo8b$8bo4bobo4bo8b$8bo4bobo4bo8b$10b3o3b3o10b2$\r\n            8b3o7b3o8b$2b3o2bo4bo3bo4bo2b3o2b$7bo4bo3bo4bo7b$o4bobo4bo3bo4bobo4bo$\r\n            o4bo17bo4bo$o4bo2b3o7b3o2bo4bo$2b3o19b3o2b2$2b3o19b3o2b$o4bo2b3o7b3o2b\r\n            o4bo$o4bo17bo4bo$o4bobo4bo3bo4bobo4bo$7bo4bo3bo4bo7b$2b3o2bo4bo3bo4bo\r\n            2b3o2b$8b3o7b3o8b2$10b3o3b3o10b$8bo4bobo4bo8b$8bo4bobo4bo8b$8bo4bobo4b\r\n            o8b2$10b3o3b3o!`, 29, 29);\r\n    }\r\n\r\n    private applySettings() {\r\n        console.log(\"Apply settings\");\r\n    }\r\n\r\n    /**\r\n     * Add a new blueprint to the blueprints list\r\n     */\r\n    private loadBlueprint(): void {\r\n        const inputEl = document.querySelector(\"#rleContents\") as HTMLTextAreaElement;\r\n        const contents = inputEl.value.split(\"\\n\");\r\n        console.log(contents);\r\n        let name = \"\";\r\n        let x = 0;\r\n        let y = 0;\r\n        let rle = \"\";\r\n        for (let line of contents) {\r\n            if (line[0] === \"#\" && line[1] === \"N\") {\r\n                /** This is the name of the pattern, we need it to display it in the UI */\r\n                name = line.substr(3);\r\n            } else if (line[0] === \"#\") {\r\n                /** Skip any other comments, for future use(would be nice to display pattern author) */\r\n                continue;\r\n            } else if (line[0] === \"x\") {\r\n                /* Line with pattern width, height and rule set\r\n                 *  We remove all spaces for easier parsing and split the values */\r\n                line = line.replace(/\\s/g, \"\");\r\n                const values = line.split(\",\");\r\n                for (const value of values) {\r\n                    if (value[0] === \"x\") {\r\n                        /** Parsing of X value, find the start position of = and parse the right hand side ie. the number */\r\n                        const index = value.indexOf(\"=\");\r\n                        x = Number(value.substr(index + 1));\r\n                    } else if (value[0] === \"y\") {\r\n                        /** Parsing of Y value, find the start position of = and parse the right hand side ie. the number */\r\n                        const index = value.indexOf(\"=\");\r\n                        y = Number(value.substr(index + 1));\r\n                    }\r\n                }\r\n            } else {\r\n                /** Any other line should be rle encoded pattern so just add the lines together for the parser later */\r\n                rle += line;\r\n            }\r\n        }\r\n        /** Create a new blueprint with the parsed values */\r\n        this.addNewBlueprint(name, rle, x, y);\r\n    }\r\n\r\n    /**\r\n     * Parses the pattern and adds it to the blueprint list\r\n     * @param {string} name Name of the pattern\r\n     * @param {string} pattern RLE encoded pattern\r\n     * @param {number} x Width of pattern\r\n     * @param {number} y Height of pattern\r\n     */\r\n    private addNewBlueprint(name: string, pattern: string, x: number, y: number): void {\r\n        const tmp = RLEParser.parse(pattern, x, y);\r\n        this.updateBlueprintsList(new Blueprint(x, y, tmp, name));\r\n    }\r\n\r\n    /**\r\n     * Binds an event to the element\r\n     * @param {string} selector Selector for the element\r\n     * @param {string} event Event which we bind to\r\n     * @param {(event: any) => any} action The action for the event\r\n     */\r\n    private bindEvent(selector: string, event: string, action: (event: any) => any): void {\r\n        const element = document.body.querySelector(selector) as HTMLElement;\r\n        if (element !== null && element !== undefined) {\r\n            element.addEventListener(event, action);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the provided element\r\n     * @param {string} selector Selector for which element\r\n     * @param {(element: any) => any} action Action to do on the provided element\r\n     */\r\n    private updateElement(selector: string, action: (element: any) => any): void {\r\n        const element = document.body.querySelector(selector) as HTMLElement;\r\n        if (element !== null && element !== undefined) {\r\n            action(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggles the sidebar on or off\r\n     * @param {string} selector Which sidebar to toggle\r\n     */\r\n    private toggleSidebar(selector: string): void {\r\n        const sidebar = document.querySelector(selector);\r\n        if (sidebar !== null && sidebar !== undefined) {\r\n            if (sidebar.classList.contains(\"hidden\")) {\r\n                sidebar.classList.replace(\"hidden\", \"shown\");\r\n            } else {\r\n                sidebar.classList.replace(\"shown\", \"hidden\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates and sets the canvas size according to the page size, in order for canvas to take up as much space as possible\r\n     * @param {number} resolution\r\n     */\r\n    private sizeCanvas(resolution: number) {\r\n        const parent = this.canvas.parentElement as HTMLDivElement;\r\n\r\n        this.canvas.width = Math.floor((parent.offsetWidth - 40) / resolution) * resolution;\r\n        this.canvas.height = Math.floor((window.outerHeight - 200) / resolution) * resolution;\r\n\r\n        this.canvas.style.marginLeft = \"20px\";\r\n        this.canvas.style.marginRight = \"20px\";\r\n    }\r\n\r\n    /**\r\n     * Click event listener for items in the blueprints list\r\n     * @param {HTMLElement} child Item in the blueprints list\r\n     * @returns {any}\r\n     */\r\n    private blueprintsListClick(child: HTMLElement): any {\r\n        const other = document.querySelector(\".list-group-item.list-group-item-action.active\") as HTMLElement;\r\n        if (other !== null && other !== undefined) {\r\n            other.classList.remove(\"active\");\r\n        }\r\n        child.classList.add(\"active\");\r\n        /* tslint:disable-next-line */\r\n        const id = Number(child.dataset[\"id\"]);\r\n        const blueprint = this.blueprints[id];\r\n        this.game.selectBlueprint(blueprint);\r\n        this.updateElement(\"#selectedBlueprintLabel\", (element) => {\r\n            const label = element as HTMLParagraphElement;\r\n            label.innerText = `Selected blueprint: ${blueprint.name}`;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates and append new item to the blueprints list with the provided blueprint\r\n     * @param {Blueprint} blueprint New blueprint to add\r\n     */\r\n    private updateBlueprintsList(blueprint: Blueprint) {\r\n        this.blueprints.push(blueprint);\r\n        const item = document.createElement(\"div\");\r\n        item.innerText = blueprint.name;\r\n        item.classList.add(\"list-group-item\", \"list-group-item-action\");\r\n        /* tslint:disable-next-line */\r\n        item.dataset[\"id\"] = String(this.blueprints.length - 1);\r\n        item.addEventListener(\"click\", () => {\r\n            this.blueprintsListClick(item);\r\n        });\r\n        this.blueprintsList.appendChild(item);\r\n    }\r\n}\r\n\r\n// Load the application once the DOM is ready, using `jQuery.ready`:\r\n$(() => {\r\n    // Finally, we kick things off by creating the **App**.\r\n    // tslint:disable\r\n    new App(\"canvas\");\r\n});\r\n","import {Cell, State} from \"./cell\";\r\n\r\nexport class Blueprint {\r\n    /**\r\n     * Blueprint width\r\n     */\r\n    public x: number;\r\n    /**\r\n     * Blueprint height\r\n     */\r\n    public y: number;\r\n    /**\r\n     * Blueprint cell states\r\n     */\r\n    public cells!: State[][];\r\n    /**\r\n     * Name of the blueprint\r\n     */\r\n    public name: string;\r\n\r\n    /**\r\n     * Creates a new blueprint\r\n     * @param {number} x Width of the blueprint\r\n     * @param {number} y Height of the blueprint\r\n     * @param {State[][]} cells Cell states of the blueprint\r\n     * @param {string} name Optional, blueprint name, defaults to Unknown\r\n     */\r\n    constructor(x: number, y: number, cells: State[][], name = \"Unknown\") {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.name = name;\r\n        this.cells = cells;\r\n    }\r\n}\r\nexport default Blueprint;\r\n","/**\r\n * Cells state\r\n */\r\nexport enum State {\r\n    DEAD = 0,\r\n    ALIVE = 1,\r\n}\r\n\r\nexport class Cell {\r\n    /**\r\n     * X coordinate of the cell on the board\r\n     */\r\n    public x: number;\r\n    /**\r\n     * Y coordinate of the cell on the board\r\n     */\r\n    public y: number;\r\n    /**\r\n     * Width of the cell when drawing\r\n     */\r\n    public width: number;\r\n    /**\r\n     * Height of the cell when drawing\r\n     */\r\n    public height: number;\r\n    /**\r\n     * Cells current state\r\n     */\r\n    public state: State = State.DEAD;\r\n    /**\r\n     * Cells state for the next pass\r\n     */\r\n    public nextState: State = State.DEAD;\r\n    /**\r\n     * Cells display color\r\n     * @type {string}\r\n     */\r\n    public color = \"black\";\r\n\r\n    /**\r\n     *\r\n     * @param x X position of the cell on the board\r\n     * @param y Y position of the cell on the board\r\n     * @param resolution Game resolution, how wide and tall cell is\r\n     * @param state Cells initial state\r\n     */\r\n    constructor(x: number, y: number, resolution: number, state?: State) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = resolution;\r\n        this.height = resolution;\r\n        if (state) {\r\n            this.state = state;\r\n            this.nextState = state;\r\n        } else {\r\n            this.state = State.DEAD;\r\n            this.nextState = State.DEAD;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Swaps the cells current state with the next state\r\n     */\r\n    public swapState() {\r\n        this.state = this.nextState;\r\n    }\r\n\r\n    /**\r\n     * Set the both, current and next state to the same state\r\n     * @param value Desired state\r\n     */\r\n    public setState(value: State) {\r\n        this.state = value;\r\n        this.nextState = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the height and width of the cell\r\n     * @param {number} width Desired width\r\n     * @param {number} height Desired height\r\n     */\r\n    public setSize(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n}\r\n\r\nexport default Cell;\r\n","export class Chrono {\r\n    /**\r\n     * Is timer running at the moment\r\n     * @type {boolean}\r\n     */\r\n    private isRunning = false;\r\n    /**\r\n     * Start date of timing, used for calculating the difference\r\n     */\r\n    private startDate: Date;\r\n\r\n    /**\r\n     * Creates a new timer with provided time\r\n     * @param {Date} startDate Start date used for calculating the difference defaults to now\r\n     */\r\n    constructor(startDate: Date = new Date()) {\r\n        this.startDate = startDate;\r\n    }\r\n\r\n    /**\r\n     * Starts the timer if it is not running\r\n     */\r\n    public startTiming() {\r\n        if (!this.isRunning) {\r\n           this.startDate = new Date();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the timer and returns a time between start and stop\r\n     * @returns {number} Time in millisecond since start of timing\r\n     */\r\n    public stopTiming(): number {\r\n        this.isRunning = false;\r\n        const now = new Date();\r\n        return Math.max(0, now.getMilliseconds() - this.startDate.getMilliseconds());\r\n    }\r\n}\r\nexport default Chrono;\r\n","import {anything} from \"ts-mockito\";\r\nimport Blueprint from \"./blueprint\";\r\nimport {Cell, State} from \"./cell\";\r\nimport Chrono from \"./chrono\";\r\nimport GameState from \"./game_state\";\r\nimport Settings from \"./settings\";\r\nexport class Game {\r\n\r\n    /**\r\n     * Holds game settings and state\r\n     */\r\n    public settings: Settings;\r\n\r\n    public state: GameState = new GameState();\r\n\r\n    public chrono: Chrono = new Chrono();\r\n    /**\r\n     * Number of rows on the board\r\n     */\r\n    public rows: number;\r\n    /**\r\n     * Number of column on the board\r\n     */\r\n    public cols: number;\r\n    /**\r\n     * Number of cells which changed their state to ALIVE during algorithm pass\r\n     */\r\n    public alive = 0;\r\n\r\n    /**\r\n     * Current game generation\r\n     * @type {number}\r\n     */\r\n    public generation = 0;\r\n\r\n    /**\r\n     * Game board of cells\r\n     */\r\n    public cells!: Cell[][];\r\n\r\n    private readonly colors: string[] = [\"crimson\", \"darkorange\", \"gold\", \"mediumpurple\", \"indigo\", \"limegreen\", \"teal\", \"black\"];\r\n\r\n    /**\r\n     *\r\n     * @param settings Game settings\r\n     */\r\n    constructor(settings: Settings) {\r\n        this.settings = settings;\r\n        this.alive = 0;\r\n        /** Game board size depends on the resolution */\r\n        this.rows = this.settings.height / this.settings.resolution;\r\n        this.cols = this.settings.width / this.settings.resolution;\r\n    }\r\n\r\n    /**\r\n     * Adds event listeners to the canvas\r\n     */\r\n    public initCanvasEvents(): void {\r\n        /** Listener for the left and right mouse click, invokes the place callback */\r\n        this.settings.canvas.addEventListener(\"mousedown\", this.place, false);\r\n        /** Listener for the mouse hover, invokes the hover callback */\r\n        this.settings.canvas.addEventListener(\"mousemove\", this.hover, false);\r\n    }\r\n\r\n    /**\r\n     * Initializes and draws the game with random cell placements\r\n     */\r\n    public initBoard(): void {\r\n        this.initCells();\r\n        this.initCanvasEvents();\r\n        this.drawGrid();\r\n    }\r\n\r\n    /**\r\n     * Populates the board with randomly assigned ALIVE cells\r\n     */\r\n    public randomBoard(): void {\r\n        this.randomSeed();\r\n        this.render();\r\n        this.generation = 0;\r\n    }\r\n\r\n    /**\r\n     * Clears the game board, all cells have state DEAD\r\n     */\r\n    public clearBoard(): void {\r\n        this.initCells();\r\n        this.render();\r\n        this.generation = 0;\r\n    }\r\n\r\n    /**\r\n     * Does one step of the Game of Life algorithm and assigns the next state to the cells.\r\n     * Also keeps count of number of cells that changed their state to ALIVE\r\n     */\r\n    public step = (): void => {\r\n        /** Reset the alive counter */\r\n        this.alive = 0;\r\n        this.generation++;\r\n\r\n        this.chrono.startTiming();\r\n\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                const cell = this.cells[i][j];\r\n                /** Sum the 3*3 neighbours around the currently selected cell */\r\n                const sum = this.sumNeighbours(cell);\r\n                cell.color = this.colors[sum];\r\n                if (sum === 4) {\r\n                    cell.nextState = cell.state;\r\n                } else if (sum === 3) {\r\n                    this.alive++;\r\n                    cell.nextState = State.ALIVE;\r\n                } else {\r\n                    cell.nextState = State.DEAD;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.state.stepTime = this.chrono.stopTiming();\r\n\r\n        /** Draw the board */\r\n        this.render();\r\n\r\n        if (this.alive === 0) {\r\n            /** Stop the algorithm, there were no changes to the cells states */\r\n            this.state.running = false;\r\n            return;\r\n        }\r\n        /** Wait to finish drawing and repeat the step if game state is in RUN mode */\r\n        if (this.state.running) {\r\n            setTimeout(() => {\r\n                requestAnimationFrame(this.step);\r\n            }, 1000 / this.settings.fps);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the game run state\r\n     * @returns {boolean} True if game is in run state, false otherwise\r\n     */\r\n    public isRunning(): boolean {\r\n        return this.state.running;\r\n    }\r\n\r\n    /**\r\n     * Changes the game state and starts the algorithm\r\n     */\r\n    public run(): void {\r\n        this.state.running = !this.state.running;\r\n        this.step();\r\n    }\r\n\r\n    /**\r\n     * Resizes the board with the new resolution, cells outside are deleted\r\n     * @param {number} resolution Desired new resolution\r\n     */\r\n    public resize(resolution: number): void {\r\n        const newRows = this.settings.height / resolution;\r\n        const newCols = this.settings.width / resolution;\r\n\r\n        if (this.rows > newRows && this.cols > newCols) {\r\n            this.shrink(resolution, newRows, newCols);\r\n        } else {\r\n            this.expand(resolution, newRows, newCols);\r\n        }\r\n        this.cols = newCols;\r\n        this.rows = newRows;\r\n        if (!this.state.running) {\r\n            this.render();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the provided blueprint(changes the cells state) to the board and redraws the board\r\n     * @param {number} x X position where to place the blueprint\r\n     * @param {number} y Y position where to place the blueprint\r\n     * @param {Blueprint} blueprint Blueprint to add\r\n     */\r\n    public addBlueprint(x: number, y: number, blueprint: Blueprint): void {\r\n        for (let i = 0; i < blueprint.y; i++) {\r\n            for (let j = 0; j < blueprint.x; j++) {\r\n                this.cells[i + y][j + x].setState(blueprint.cells[i][j]);\r\n            }\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    /**\r\n     * Previews the blueprint, does not change the underlying cells state\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {Blueprint} blueprint\r\n     */\r\n    public previewBlueprint(x: number, y: number, blueprint: Blueprint): void {\r\n        for (let i = 0; i < blueprint.y; i++) {\r\n            for (let j = 0; j < blueprint.x; j++) {\r\n                if (blueprint.cells[i][j] === State.ALIVE) {\r\n                    this.cellPreview(j + x, i  + y);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Marks the provided blueprint as selected for the preview and placement\r\n     * @param {Blueprint} blueprint Blueprint to select\r\n     */\r\n    public selectBlueprint(blueprint: Blueprint) {\r\n        this.state.selectedBlueprint = blueprint;\r\n        this.state.hasSelectedBlueprint = true;\r\n    }\r\n\r\n    /**\r\n     * Removes the selected blueprint\r\n     */\r\n    public clearSelectedBlueprint() {\r\n        this.state.hasSelectedBlueprint = false;\r\n    }\r\n\r\n    /**\r\n     * Randomly assigns ALIVE state to some cells\r\n     */\r\n    private randomSeed(): void {\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                const cell = this.cells[i][j];\r\n                if (Math.random() > 0.66) {\r\n                    cell.setState(State.ALIVE);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the board and cells in the board\r\n     */\r\n    private initCells(): void {\r\n        this.cells = [];\r\n        for (let i = 0; i < this.rows; i++) {\r\n            this.cells[i] = [];\r\n            for (let j = 0; j < this.cols; j++) {\r\n                this.cells[i][j] = new Cell(i, j, this.settings.resolution);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the grid on the canvas. Grid size depends on the resolution setting\r\n     */\r\n    private drawGrid(): void {\r\n        this.settings.context.strokeStyle = \"rgb(127,127,127)\";\r\n        /** Draw the rows, spaced by the resolution setting */\r\n        for (let i = 0; i < this.rows; i++) {\r\n            this.settings.context.beginPath();\r\n            this.settings.context.moveTo(0, i * this.settings.resolution);\r\n            this.settings.context.lineTo(this.settings.canvas.width, i * this.settings.resolution);\r\n            this.settings.context.stroke();\r\n        }\r\n        /** Draw the columns, spaced by the resolution setting */\r\n        for (let i = 0; i < this.cols; i++) {\r\n            this.settings.context.beginPath();\r\n            this.settings.context.moveTo(i * this.settings.resolution, this.settings.canvas.height);\r\n            this.settings.context.lineTo(i * this.settings.resolution, 0);\r\n            this.settings.context.stroke();\r\n        }\r\n    }\r\n\r\n    /** Draws a single cell only if its state is ALIVE */\r\n    private drawCell(cell: Cell): void {\r\n        this.settings.context.fillStyle = cell.color;\r\n        if (cell.state === State.ALIVE) {\r\n            this.settings.context.fillRect(cell.y * this.settings.resolution + 1, cell.x * this.settings.resolution + 1, cell.width - 2, cell.height - 2);\r\n        }\r\n    }\r\n\r\n    /** Re draws the selected cell depending on its state\r\n     *  - Black if the cell is ALIVE\r\n     *  - White if the cell is DEAD\r\n     */\r\n    private updateCellDisplay(cell: Cell): void {\r\n        if (cell.state === State.ALIVE) {\r\n            this.settings.context.fillRect(cell.y * this.settings.resolution + 1, cell.x * this.settings.resolution + 1, cell.width - 2, cell.height - 2);\r\n        } else {\r\n            this.settings.context.clearRect(cell.y * this.settings.resolution + 1, cell.x * this.settings.resolution + 1, cell.width - 2, cell.height - 2);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw only the alive cells on the canvas\r\n     */\r\n    private render(): void {\r\n\r\n        /** 1.) clear the display */\r\n        this.clearDisplay();\r\n\r\n        /** 2.) draw the grid, based on current settings */\r\n        this.chrono.startTiming();\r\n        if (this.settings.showGrid) {\r\n            this.drawGrid();\r\n        }\r\n        this.state.drawTime = this.chrono.stopTiming();\r\n\r\n        this.chrono.startTiming();\r\n        /** 3.) Swap the state of each cell and draw it */\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                const cell = this.cells[i][j];\r\n                /** Swap the cells state and draw it on the board */\r\n                cell.swapState();\r\n                this.drawCell(cell);\r\n            }\r\n        }\r\n\r\n        this.state.swapTime = this.chrono.stopTiming();\r\n\r\n        /** 4.) Optionali, render the info box */\r\n        if (this.settings.showInfo) {\r\n            this.renderInfoBox();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Draws a small info box in the right hand corner with statistical info which include:\r\n     *  - Current generation\r\n     *  - Number of cells that changed their state to ALIVE\r\n     *  - Time it took to update all cells state\r\n     *  - Time it took to swap states and draw cells\r\n     *  - Time it took to draw the board\r\n     *  - Total time for mentioned operation\r\n     *  - Current FPS setting\r\n     *  - Current resolution setting\r\n     */\r\n    private renderInfoBox() {\r\n        const left = this.settings.width - 150;\r\n        this.settings.context.fillStyle = \"rgba(0,0,0,0.6)\";\r\n        this.settings.context.fillRect(left, 0, 180, 150);\r\n        this.settings.context.fillStyle = \"white\";\r\n        this.settings.context.fillText(`Generation: ${this.generation}`, left + 15, 20, 150 - 25);\r\n        this.settings.context.fillText(`Alive: ${this.alive}`, left + 15, 35, 150 - 25);\r\n        this.settings.context.fillText(`Step time: ${this.state.stepTime} ms`, left + 15, 50, 150 - 25);\r\n        this.settings.context.fillText(`Swap state and draw time: ${this.state.swapTime} ms`, left + 15, 65, 150 - 25);\r\n        this.settings.context.fillText(`Grid draw time: ${this.state.drawTime} ms`, left + 15, 80, 150 - 25);\r\n        this.settings.context.fillText(`Total time: ${this.state.stepTime + this.state.swapTime + this.state.drawTime} ms`, left + 15, 95, 150 - 25);\r\n        this.settings.context.fillText(`FPS: ${this.settings.fps}`, left + 15, 110, 150 - 25);\r\n        this.settings.context.fillText(`Resolution: ${this.settings.resolution}`, left + 15, 125, 150 - 25);\r\n    }\r\n\r\n    /**\r\n     * Canvas mouse click callback.\r\n     * Decodes the click coordinate and changes the selected cells state or places the selected blueprint\r\n     * - Left Button(0): Marks the selected cell as ALIVE or places the selected blueprint\r\n     * - Right Button(2): Marks the selected cell as DEAD\r\n     * Updates the selected cells display on the board\r\n     *\r\n     */\r\n    private readonly place = (event: MouseEvent): void => {\r\n        let x = event.x;\r\n        let y = event.y;\r\n\r\n        x -= this.settings.canvas.offsetLeft;\r\n        y -= this.settings.canvas.offsetTop;\r\n\r\n        x = Math.floor(x / this.settings.resolution);\r\n        y = Math.floor(y / this.settings.resolution);\r\n\r\n        // console.log(`place: x: ${x} y: ${y} event: ${event}`); */\r\n        if (event.button === 0) {\r\n            if (this.state.hasSelectedBlueprint) {\r\n                this.addBlueprint(x, y, this.state.selectedBlueprint);\r\n            } else {\r\n                this.cells[y][x].setState(State.ALIVE);\r\n            }\r\n        } else if (event.button === 2) {\r\n            this.cells[y][x].setState(State.DEAD);\r\n        }\r\n        this.updateCellDisplay(this.cells[y][x]);\r\n    };\r\n\r\n    /**\r\n     * Canvas mouse over event callback\r\n     * Redraws the board and displays the currently selected cell under the mouse cursor as red color, does not change the cell state.\r\n     * If game has a selected blueprint, it draws a preview of it instead\r\n     */\r\n    private readonly hover = (event: MouseEvent): void => {\r\n        this.render();\r\n        let x = event.x;\r\n        let y = event.y;\r\n\r\n        x -= this.settings.canvas.offsetLeft;\r\n        y -= this.settings.canvas.offsetTop;\r\n\r\n        /** Allow the Snap to grid functionality */\r\n        if (this.settings.snapToGrid) {\r\n            x = Math.floor(x / this.settings.resolution);\r\n            y = Math.floor(y / this.settings.resolution);\r\n        }\r\n\r\n        // console.log(`hover: x: ${x} y: ${y}`); */\r\n        if (this.state.hasSelectedBlueprint) {\r\n            this.previewBlueprint(x, y, this.state.selectedBlueprint);\r\n        } else {\r\n            this.cellPreview(x, y);\r\n        }\r\n    };\r\n\r\n    /** Draw the selected cell in case of mouse over event in red color, does not change the state */\r\n    private cellPreview(x: number, y: number) {\r\n        this.settings.context.fillStyle = \"rgba(255,0,0,0.6)\";\r\n        const posx = x * this.settings.resolution;\r\n        const posy = y * this.settings.resolution;\r\n        this.settings.context.fillRect(posx + 1, posy + 1, this.settings.resolution - 2, this.settings.resolution - 2);\r\n    }\r\n\r\n    /**\r\n     * Clears the canvas\r\n     */\r\n    private clearDisplay(): void {\r\n        this.settings.context.clearRect(0, 0, this.settings.canvas.width, this.settings.canvas.height);\r\n    }\r\n\r\n    /**\r\n     * Sums the 3x3 area around the selected cell, the selected cell is in the middle\r\n     * @param cell Cell of which the neighbours are summed\r\n     */\r\n    private sumNeighbours(cell: Cell): number {\r\n        let sum = 0;\r\n        const x = cell.x;\r\n        const y = cell.y;\r\n        for (let i = -1; i <= 1; i++) {\r\n            for (let j = -1; j <= 1; j++) {\r\n                /** Check for out of bounds, out of bounds positions are treated as DEAD cells */\r\n                if ((y + i) >= 0 && (y + i) < this.cols && (x + j) >= 0 && (x + j) < this.rows) {\r\n                    sum += this.cells[x + j][y + i].state;\r\n                }\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    /**\r\n     * Shrinks the game board to the new size, cells that are outside of the new board size are removed\r\n     * @param {number} resolution New resolution\r\n     * @param {number} newRows New number of rows after shrinkage\r\n     * @param {number} newCols New number of columns after shrinkage\r\n     */\r\n    private shrink(resolution: number, newRows: number, newCols: number) {\r\n        /** New board */\r\n        let newCells: Cell[][];\r\n        newCells = [];\r\n        /** Copy the old board into the new board, but only the cells that are within the new size */\r\n        for (let i = 0; i < newRows; i++) {\r\n            newCells[i] = [];\r\n            for (let j = 0; j < newCols; j++) {\r\n                newCells[i][j] = this.cells[i][j];\r\n                /** Update the cells size */\r\n                newCells[i][j].setSize(resolution, resolution);\r\n            }\r\n        }\r\n        /** Replace the old board with the new board */\r\n        this.cells = newCells;\r\n    }\r\n\r\n    /**\r\n     * Expands the board with the new cells, marked as DEAD\r\n     * @param {number} resolution New resolution\r\n     * @param {number} newRows New number of rows\r\n     * @param {number} newCols New number of columns\r\n     */\r\n    private expand(resolution: number, newRows: number, newCols: number) {\r\n        /** New board */\r\n        let newCells: Cell[][];\r\n        newCells = [];\r\n        /** Initialize the new board with DEAD cells */\r\n        for (let i = 0; i < newRows; i++) {\r\n            newCells[i] = [];\r\n            for (let j = 0; j < newCols; j++) {\r\n                newCells[i][j] = new Cell(i, j, resolution);\r\n            }\r\n        }\r\n        /** Copy the old cells into the new board */\r\n        for (let i = 0; i < this.rows; i++) {\r\n            for (let j = 0; j < this.cols; j++) {\r\n                newCells[i][j] = this.cells[i][j];\r\n                /** Resize the old cells with the new resolution */\r\n                newCells[i][j].setSize(resolution, resolution);\r\n            }\r\n        }\r\n        /** Replace the old board with the new board */\r\n        this.cells = newCells;\r\n    }\r\n}\r\n\r\nexport default Game;\r\n","import Blueprint from \"./blueprint\";\r\nimport Chrono from \"./chrono\";\r\nexport class GameState {\r\n    /**\r\n     * Is game in running state\r\n     */\r\n    public running = false;\r\n    /**\r\n     * Time it took to do one step of algorithm\r\n     * @type {number}\r\n     */\r\n    public stepTime = 0;\r\n    /**\r\n     * Time it took to swap cells states and draws them\r\n     * @type {number}\r\n     */\r\n    public swapTime = 0;\r\n    /**\r\n     * Time it took to draw the board(grid)\r\n     * @type {number}\r\n     */\r\n    public drawTime = 0;\r\n    /**\r\n     * Currently selected blueprint for placement\r\n     */\r\n    public selectedBlueprint!: Blueprint;\r\n    /**\r\n     *  Use the currently selected blueprint\r\n     * @type {boolean}\r\n     */\r\n    public hasSelectedBlueprint = false;\r\n}\r\nexport default GameState\r\n","import Blueprint from \"../blueprint\";\r\nimport {Cell, State} from \"../cell\";\r\n\r\nclass RLEParser {\r\n\r\n    private static instance: RLEParser;\r\n    private readonly pattern = new RegExp(\"(\\\\d+)|(\\\\w)|(!)|(\\\\$)\", \"g\");\r\n\r\n    private constructor() {\r\n\r\n    };\r\n\r\n    public parse(line: string, x: number, y: number): State[][] | any {\r\n        const tokens = line.match(this.pattern);\r\n        if (tokens === null || tokens === undefined) {\r\n            console.error(\"Invalid RLE line\");\r\n            return null;\r\n        }\r\n        const states: State[][] = [];\r\n        for (let i = 0; i < y; i++) {\r\n            states[i] = [];\r\n            for (let j = 0; j < x; j++) {\r\n                states[i][j] = 0;\r\n            }\r\n        }\r\n        let currentNumber = 1;\r\n        let row = 0;\r\n        let column = 0;\r\n        for (const token of tokens) {\r\n            if (!isNaN(Number(token))) {\r\n                currentNumber = Number(token);\r\n            } else if (token === \"b\") {\r\n                // dead cell */\r\n                // console.log(`${currentNumber} dead cells`); */\r\n                column += currentNumber;\r\n                currentNumber = 1;\r\n            } else if (token === \"o\") {\r\n                // alive cell */\r\n                // console.log(`${currentNumber} alive cell`); */\r\n                for (let i = 0; i < currentNumber; i++) {\r\n                    states[row][column + i] = 1;\r\n                }\r\n                column += currentNumber;\r\n                currentNumber = 1;\r\n            } else if (token === \"$\") {\r\n                // end of line */\r\n                // console.log(\"new line\"); */\r\n                column = 0;\r\n                row += currentNumber;\r\n                currentNumber = 1;\r\n            } else if (token === \"!\") {\r\n                // end of pattern */\r\n                // console.log(\"end of pattern\") */\r\n            }\r\n        }\r\n        return states;\r\n    }\r\n\r\n    public static get Instance() {\r\n        return this.instance || (this.instance = new this());\r\n    }\r\n}\r\n\r\nconst instance = RLEParser.Instance;\r\nexport default instance;\r\n","/**\r\n * Holds game state and settings\r\n */\r\nexport class Settings {\r\n\r\n    /**\r\n     * Canvas element we draw to\r\n     */\r\n    public canvas: HTMLCanvasElement;\r\n    /**\r\n     * Context to draw with\r\n     */\r\n    public context: CanvasRenderingContext2D;\r\n\r\n    /**\r\n     * Is snap to grid enabled\r\n     */\r\n    public snapToGrid = true;\r\n\r\n    /**\r\n     * Is show grid enabled\r\n     */\r\n    public showGrid = true;\r\n\r\n    /**\r\n     * Display game info box\r\n     * @type {boolean}\r\n     */\r\n    public showInfo = false;\r\n\r\n    /**\r\n     * Fps at witch the game is being drawn/updated\r\n     * @type {number}\r\n     */\r\n    public fps = 24;\r\n\r\n    /**\r\n     * Canvas height\r\n     */\r\n    private readonly _height: number;\r\n\r\n    /**\r\n     * Canvas width\r\n     */\r\n    private readonly _width: number;\r\n\r\n    /**\r\n     * Game resolution, grid size, cells width and height\r\n     */\r\n    private _resolution: number;\r\n\r\n    /**\r\n     * Initializes the settings\r\n     * @param canvas Canvas element we use to draw to\r\n     * @param resolution The desired resolution\r\n     */\r\n    constructor(canvas: HTMLCanvasElement, resolution: number) {\r\n        this.canvas = canvas;\r\n        this.context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        this._width = canvas.width;\r\n        this._height = canvas.height;\r\n        this._resolution = resolution;\r\n    }\r\n\r\n    /**\r\n     * Returns the canvas width\r\n     * @returns {number} Canvas width\r\n     */\r\n    get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    /**\r\n     * Returns the canvas height\r\n     * @returns {number} Canvas height\r\n     */\r\n    get height(): number {\r\n        return this._height;\r\n    }\r\n\r\n    /**\r\n     * Returns the current resolution\r\n     * @returns {number} Current resolution\r\n     */\r\n    get resolution(): number {\r\n        return this._resolution;\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution to a new value\r\n     * @param {number} value New resolution value\r\n     */\r\n    set resolution(value: number) {\r\n        this._resolution = value;\r\n    }\r\n}\r\n\r\nexport default Settings;\r\n"],"sourceRoot":""}